library '_github.com_pipeline-demo-caternberg_pipeline_examples' _
def mavenPod = libraryResource 'podtemplates/podTemplate-maven.yaml'
def kanikoPod = libraryResource 'podtemplates/podTemplate-kaniko.yaml'
def sonarQubePod = libraryResource 'podtemplates/podTemplate-qs-sonarqube.yaml'
def testScript = libraryResource 'scripts/script.sh'
//def MVN_COMMAND_PACKAGE = 'mvn -q clean package -Dembedd-dependencies -Dmaven.repo.local=/tmp/.m2'
//def MVN_COMMAND_DEPLOY = "mvn -e -Djansi.force=true -Dstyle.color=always  -Dembedd-dependencies -Dmaven.repo.local=/tmp/.m2  -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true spring-boot:run"
def MVN_COMMAND_DEPLOY = "mvn -e -Djansi.force=true -Dstyle.color=always  -Dembedd-dependencies -Dmaven.repo.local=/tmp/.m2  -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true clean install"
//def MVN_COMMAND_DEPLOY = "mvn  -e -Djansi.force=true -Dstyle.color=always  -Dembedd-dependencies -Dmaven.repo.local=/tmp/.m2  -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true clean deploy "
//def MVN_COMMAND_DEPLOY = "mvn  -e -Djansi.force=true -Dstyle.color=always  -Dembedd-dependencies clean deploy"

pipeline {
    //When applied at the top-level of the pipeline block no global agent will be allocated for the entire Pipeline run and each stage section will need to contain its own agent section. For example: agent none
    agent none
    // agent any
    options {
        //https://plugins.jenkins.io/timestamper/
        timestamps()
        //https://plugins.jenkins.io/ansicolor/
       // ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        //https://www.jenkins.io/blog/2018/02/22/cheetah/}
        //https://www.jenkins.io/doc/book/pipeline/scaling-pipeline/
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }

    environment {
        A_VALUE = 'Some Value'
    }


    stages {

        stage("build") {
            agent {
                kubernetes {
                    //#deprectatedlabel 'mavenPod'
                    defaultContainer "maven"
                    yaml mavenPod
                }
            }
            steps {
                container("maven") {
                    sh "echo ${A_VALUE}"
                    configFileProvider([configFile(fileId: 'global-maven-settings', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "cat ${MAVEN_SETTINGS_XML}"
                        sh "ls -l"
                        ansiColor('xterm') {
                            sh "${MVN_COMMAND_DEPLOY} -s ${MAVEN_SETTINGS_XML}"
                        }
                        junit '**/target/surefire-reports/TEST-*.xml'
                        archive '**/target/*.jar'
                    }
                    stash includes: '**/*', name: 'app'
                }
            }
            post {
                always {
                    echo "scan for mvn issues..."
                    scanForIssues tool: mavenConsole(name: 'mvn')
                    //Seet GitHub App https://docs.cloudbees.com/docs/cloudbees-ci/2.235.1.2/traditional-admin-guide/github-app-auth#_creating_the_github_app
                    //publishIssues([])
                    //https://www.jenkins.io/blog/2020/08/31/github-checks-api-plugin-coding-phase-3/
                    publishChecks detailsURL: '${BUILD_URL}', name: 'mvn build', text: 'mvn build', title: 'mvn build'
                }
            }
        }
        stage("Run parallel sequences") {
            parallel {
                stage("Test Firefox") {
                    agent {
                        kubernetes {
                            //#deprectated label 'mavenPodFireFox'
                            defaultContainer "maven"
                            yaml mavenPod
                        }
                    }
                    options {
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage("prepare test") {
                            steps {
                                sh "echo TODO test prepare FireFox...."
                                timeout(time: 3, unit: 'MINUTES') {
                                    retry(5) {
                                        //call external shell script
                                        sh "${testScript}"
                                    }
                                }
                            }
                        }
                        stage("run test") {
                            steps {
                                sh "echo TODO test FireFox"

                            }
                        }
                    }
                }

                stage("Test Chrome") {
                    agent {
                        kubernetes {
                            label 'mavenPodChrome'
                            defaultContainer "maven"
                            yaml mavenPod
                        }
                    }
                    options {
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage("prepare test") {
                            steps {
                                unstash 'app'
                                sh "echo TODO test prepare Chrome...."
                                timeout(time: 3, unit: 'MINUTES') {
                                    retry(5) {
                                        //call external shell script
                                        sh "${testScript}"
                                    }
                                }
                            }
                        }
                        stage("run test") {
                            steps {
                                sh "echo TODO test Chrome"
                            }
                        }
                    }
                }
            }
        }


     /*   stage('Sonar') {
            agent {
                kubernetes {
                    //#deprectated label 'qsscan'
                    defaultContainer "sonarscanner"
                    yaml sonarQubePod
                }
            }
            options {
                skipDefaultCheckout(true)
            }
            steps {
                container('sonarscanner') {
                    withSonarQubeEnv("sonarqube") {
                        sh "ls -l"
                        sh "sonar-scanner -Dproject.settings=./sonar-project.properties"
                    }
                }
            }
        }*/

        stage("Docker") {
            when {
                branch 'master'
            }
            agent {
                kubernetes {
                    //#deprectated label 'dockerKaniko'
                    defaultContainer "kaniko"
                    yaml kanikoPod
                }
            }
            options {
                skipDefaultCheckout(true)
            }
            steps {
                sh "echo docker build"
                container(name: 'kaniko', shell: '/busybox/sh') {
                    sh 'ls -lR'
                    unstash 'app'
                    withEnv(['PATH+EXTRA=/busybox:/kaniko']) {
                        sh '''#!/busybox/sh
              /kaniko/executor  --dockerfile $(pwd)/Dockerfile --insecure --skip-tls-verify --cache=false  --context $(pwd) --destination caternberg/spring-boot-demo:${GIT_COMMIT}
          '''
                    }
                }
            }
            post {
                success {
                    echo "Docker Build Successfully"
                    //Slack notification....
                    //Jira update
                }
                failure {
                    echo "Docker Build Failed"
                    //Slack notification....
                    //Jira update
                }
            }
        }
        //see https://medium.com/@peiruwang/build-ci-cd-multibranch-pipeline-with-jenkins-and-kubernetes-637de560d55a
        stage("Deploy to Staging") {
            when {
                branch 'staging'
            }
            steps {
                //https://github.com/jenkinsci/kubernetes-cli-plugin
               //  kubernetesDeploy kubeconfigId: 'kubeconfig-credentials-id', configs: 'YOUR_YAML_PATH/your_k8s_yaml', enableConfigSubstitution: true
                // REPLACE kubeconfigId
                sh "echo k8s deploy..."
            }
            post {
                success {
                    echo "Successfully deployed to Staging"
                }
                failure {
                    echo "Failed deploying to Staging"
                }
            }
        }
    }
}
